{
  "AddAddressToBlacklist": "event AddAddressToBlacklist(address _address)",
  "AddTreasuryWallet": "event AddTreasuryWallet(address _address)",
  "ChangeSwapFee": "event ChangeSwapFee(uint256 a, uint256 b)",
  "Deposit": "event Deposit(address indexed _account, uint256 indexed _depositAmount, uint256 indexed _mintAmount)",
  "FeeSetting": "event FeeSetting(uint256 a, uint256 b, uint256 x, uint256 y)",
  "Initialized": "event Initialized(uint8 version)",
  "Liquidate": "event Liquidate(address indexed _account, uint256 debt, uint256 rewards, address liquidator)",
  "OwnershipTransferred": "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "PauseTransactions": "event PauseTransactions()",
  "RemoveAddressFromBlacklist": "event RemoveAddressFromBlacklist(address _address)",
  "RoleAdminChanged": "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
  "RoleGranted": "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
  "RoleRevoked": "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
  "SetCollaterizationRatioThreshold": "event SetCollaterizationRatioThreshold(uint256 _value)",
  "SetLiquidationReward": "event SetLiquidationReward(uint256 _value)",
  "SetOracleAddress": "event SetOracleAddress(address _address)",
  "Swap": "event Swap(address indexed _account, string _zTokenFrom, string _zTokenTo)",
  "Withdraw": "event Withdraw(address indexed _account, string _token, uint256 _amountToWithdraw)",
  "COLLATERIZATION_RATIO_THRESHOLD": "uint256:COLLATERIZATION_RATIO_THRESHOLD",
  "CONTROLLER": "function CONTROLLER() view returns (bytes32)",
  "DEFAULT_ADMIN_ROLE": "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
  "GlobalMintersFeeAtClaim": "function GlobalMintersFeeAtClaim(address) view returns (uint256)",
  "LIQUIDATION_REWARD": "uint256:LIQUIDATION_REWARD",
  "TxPaused": "bool:TxPaused",
  "_blacklistedAddresses": "function _blacklistedAddresses(uint256) view returns (address)",
  "_updateUserDebtOutstanding": "function _updateUserDebtOutstanding(uint256 _netMintUserzUSDValue, uint256 _netMintGlobalzUSDValue) view returns (uint256)",
  "addTreasuryWallet": "function addTreasuryWallet(address _address)",
  "blacklistAddress": "function blacklistAddress(address _address)",
  "changeSwapFee": "function changeSwapFee(uint256 a, uint256 b)",
  "checkUserForLiquidation": "function checkUserForLiquidation(address _user) view returns (bool)",
  "claimFees": "function claimFees()",
  "collateral": "address:collateral",
  "depositAndMint": "function depositAndMint(uint256 _depositAmount, uint256 _mintAmount) payable",
  "feeSetting": "function feeSetting(uint256 a, uint256 b, uint256 x, uint256 y)",
  "getBalance": "function getBalance(address _token) view returns (uint256)",
  "getGlobalDebt": "uint256:getGlobalDebt",
  "getNetGlobalMintValue": "uint256:getNetGlobalMintValue",
  "getNetUserMintValue": "function getNetUserMintValue(address _address) view returns (uint256)",
  "getPotentialTotalReward": "function getPotentialTotalReward(address _user) view returns (uint256)",
  "getRoleAdmin": "function getRoleAdmin(bytes32 role) view returns (bytes32)",
  "getSwapReward": "function getSwapReward(address _user) view returns (uint256)",
  "getTotalSupply": "function getTotalSupply(address _address) view returns (uint256)",
  "getUserCollateralBalance": "uint256:getUserCollateralBalance",
  "getUserDebt": "function getUserDebt(address user) view returns (uint256)",
  "getUserFromLiquidationZone": "address[]:getUserFromLiquidationZone",
  "getzUSDAddress": "address:getzUSDAddress",
  "globalMintersFee": "uint256:globalMintersFee",
  "globalMintersPercentOfSwapFee": "uint256:globalMintersPercentOfSwapFee",
  "grantRole": "function grantRole(bytes32 role, address account)",
  "grossMintUser": "function grossMintUser(address) view returns (uint256)",
  "hasRole": "function hasRole(bytes32 role, address account) view returns (bool)",
  "isMinter": "function isMinter(address) view returns (bool)",
  "isUserBlacklisted": "function isUserBlacklisted(address) view returns (bool)",
  "liquidate": "function liquidate(address _user)",
  "manageUsersInLiquidationZone": "address[]:manageUsersInLiquidationZone",
  "mintersAddresses": "function mintersAddresses(uint256) view returns (address)",
  "netMintGlobal": "uint256:netMintGlobal",
  "netMintUser": "function netMintUser(address) view returns (uint256)",
  "owner": "address:owner",
  "pause": "function pause()",
  "removeAddressFromBlacklist": "function removeAddressFromBlacklist(address _address)",
  "renounceOwnership": "function renounceOwnership()",
  "renounceRole": "function renounceRole(bytes32 role, address account)",
  "repayAndWithdraw": "function repayAndWithdraw(uint256 _amountToRepay, uint256 _amountToWithdraw, string _zToken)",
  "revokeRole": "function revokeRole(bytes32 role, address account)",
  "setCollaterizationRatioThreshold": "function setCollaterizationRatioThreshold(uint256 _value)",
  "setLiquidationReward": "function setLiquidationReward(uint256 _value)",
  "setOracleAddress": "function setOracleAddress(address _address)",
  "supportsInterface": "function supportsInterface(bytes4 interfaceId) view returns (bool)",
  "swap": "function swap(uint256 _amount, string _zTokenFrom, string _zTokenTo)",
  "swapFee": "uint256:swapFee",
  "totalCollateral": "uint256:totalCollateral",
  "totalSwapVolume": "uint256:totalSwapVolume",
  "transferOwnership": "function transferOwnership(address newOwner)",
  "treasuryPercentOfSwapFee": "uint256:treasuryPercentOfSwapFee",
  "treasuryWallet": "address:treasuryWallet",
  "unPause": "function unPause()",
  "userAccruedFeeBalance": "function userAccruedFeeBalance(address) view returns (uint256)",
  "userCollateralBalance": "function userCollateralBalance(address) view returns (uint256)",
  "usersInLiquidationZone": "function usersInLiquidationZone(uint256) view returns (address)",
  "vault_init": "function vault_init(address _controller, address _oracle, address _collateral, address _zusd)",
  "viewMintersAddress": "address[]:viewMintersAddress",
  "zUSD": "address:zUSD"
}